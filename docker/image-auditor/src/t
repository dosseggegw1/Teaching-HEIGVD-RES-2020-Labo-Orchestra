
const PORT_UDP = 4444;
const PORT_TCP = 2205;
const ADD_MULTICAST = "239.255.22.5";

const dgram = require('dgram');
const moment = require('moment');
const socket = dgram.createSocket('udp4');

var musicians = new Map();

function getInstrument(sound){
	switch(sound){
		case "ti-ta-ti":
			return "piano";
		case "pouet":
			return "trumpet";
		case "trulu":
			return "flute";
		case "gzi-gzi":
			return "violin";
		case "boum-boum":
			return "drum";
	}
}

socket.bind(PORT_UDP, function() {
	console.log("Auditor joint the multicast group on port " + PORT_UDP);
	socket.addMembership(ADD_MULTICAST);
});

socket.on('message', function(msg, rinfo){
	const infoMusician = JSON.parse(msg);
	const id = infoMusician.musician_uuid;
	const sound = infoMusician.sound;
	const instrument = getInstrument(sound);

	if(musicians.has(id)){
		musicians.get(id).lastActive = new Date();
	}else{
		const date = new Date();
		musicians.set(id,{
			"instrument": instrument,
			"activeSince":date,
			"lastActive" : date
		});
	}
	console.log("Get info about the musician " + id + " who plays " + instrument + " and make sound " + sound + " size " + musicians.size);
});

/**
* Partie TCP
*/
const net = require("net");
const server = net.createServer();

server.listen(PORT_TCP, function(){
	console.log("Auditor TCP server is listening on port " + PORT_TCP);
});

server.on("message", (msg,rinfo) =>{
	var musiciansActive = [];
	now = new Date();
	console.log("The musician " +now);

	musicians.forEach((value, key) => {
		if((now - value.lastActive) /1000 > 5){
			musicians.delete(key);
			console.log("The musician " + key + " is not active !")
		}else{
			musiciansActive.push({
				"uuid": key,
				"instrument": value.instrument,
				"activeSince": value.activeSince
			});
		}
	});
	server.write(JSON.stringify(musiciansActive));
});